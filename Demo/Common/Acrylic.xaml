<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:fluentWpf="clr-namespace:SourceChord.FluentWPF;assembly=FluentWPF"
                    xmlns:local="http://schemas.modernwpf.com/2019"
                    xmlns:common="clr-namespace:CodeWanda.UI.Common">

    <Style x:Key="CodeWandaAcrylicWindowStyle" BasedOn="{StaticResource DefaultWindowStyle}" TargetType="Window">
        <Setter Property="fluentWpf:AcrylicWindow.TintColor"
                Value="{DynamicResource SystemControlAcrylicWindowTintColor}" />
        <Setter Property="fluentWpf:AcrylicWindow.FallbackColor"
                Value="{DynamicResource SystemControlAcrylicWindowFallbackColor}" />
        <Setter Property="Background" Value="#BB0A0A0A" />
        <Setter Property="common:AcrylicExtensions.AcrylicEnabled" Value="True" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Window">
                    <Border
                        x:Name="LayoutRoot"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        Padding="{TemplateBinding Padding}"
                        SnapsToDevicePixels="True">
                        <Grid>

                            <!-- Color tint overlay -->
                            <Rectangle x:Name="tintColorLayer"
                                       Fill="{TemplateBinding fluentWpf:AcrylicWindow.TintColor, Converter={StaticResource ColorToSolidColorBrushConverter}}"
                                       Opacity="{TemplateBinding fluentWpf:AcrylicWindow.TintOpacity}" />

                            <!-- Tiled noise texture -->
                            <Rectangle x:Name="noiseLayer"
                                       Opacity="{TemplateBinding fluentWpf:AcrylicWindow.NoiseOpacity}">
                                <Rectangle.Fill>
                                    <ImageBrush ImageSource="/FluentWPF;component/Assets/Images/noise.png"
                                                TileMode="Tile" Stretch="None"
                                                ViewportUnits="Absolute" Viewport="0,0,128,128" />
                                </Rectangle.Fill>
                            </Rectangle>

                            <!-- Fallback color layer -->
                            <Rectangle x:Name="fallbackLayer" Visibility="Collapsed"
                                       Fill="{TemplateBinding fluentWpf:AcrylicWindow.FallbackColor, Converter={StaticResource ColorToSolidColorBrushConverter}}" />

                            <Grid x:Name="ContentGrid">
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto" />
                                    <RowDefinition />
                                </Grid.RowDefinitions>

                                <local:TitleBarControl
                                    Icon="{TemplateBinding Icon}"
                                    Title="{TemplateBinding Title}"
                                    IsActive="{TemplateBinding IsActive}"
                                    Background="{TemplateBinding local:TitleBar.Background}"
                                    Foreground="{TemplateBinding local:TitleBar.Foreground}"
                                    InactiveBackground="{TemplateBinding local:TitleBar.InactiveBackground}"
                                    InactiveForeground="{TemplateBinding local:TitleBar.InactiveForeground}"
                                    Style="{TemplateBinding local:TitleBar.Style}"
                                    ButtonStyle="{TemplateBinding local:TitleBar.ButtonStyle}"
                                    IsIconVisible="{TemplateBinding local:TitleBar.IsIconVisible}"
                                    IsBackButtonVisible="{TemplateBinding local:TitleBar.IsBackButtonVisible}"
                                    IsBackEnabled="{TemplateBinding local:TitleBar.IsBackEnabled}"
                                    BackButtonCommand="{TemplateBinding local:TitleBar.BackButtonCommand}"
                                    BackButtonCommandParameter="{TemplateBinding local:TitleBar.BackButtonCommandParameter}"
                                    BackButtonCommandTarget="{TemplateBinding local:TitleBar.BackButtonCommandTarget}"
                                    BackButtonStyle="{TemplateBinding local:TitleBar.BackButtonStyle}"
                                    ExtendViewIntoTitleBar="{TemplateBinding local:TitleBar.ExtendViewIntoTitleBar}"
                                    Panel.ZIndex="1"
                                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />

                                <AdornerDecorator
                                    x:Name="AdornerDecorator"
                                    Grid.Row="1">
                                    <ContentPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                </AdornerDecorator>

                                <ResizeGrip
                                    x:Name="WindowResizeGrip"
                                    WindowChrome.ResizeGripDirection="BottomRight"
                                    Grid.Row="1"
                                    HorizontalAlignment="Right"
                                    VerticalAlignment="Bottom"
                                    IsTabStop="false"
                                    Visibility="Collapsed" />
                            </Grid>

                            <Border
                                x:Name="HighContrastBorder"
                                BorderBrush="{DynamicResource {x:Static SystemColors.ActiveCaptionBrushKey}}"
                                BorderThickness="7,1,7,7"
                                IsHitTestVisible="False"
                                Visibility="Collapsed" />
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsActive" Value="False">
                            <Setter TargetName="LayoutRoot" Property="BorderBrush"
                                    Value="{DynamicResource WindowBorderInactive}" />
                            <Setter TargetName="HighContrastBorder" Property="BorderBrush"
                                    Value="{DynamicResource {x:Static SystemColors.InactiveCaptionBrushKey}}" />
                            <Setter TargetName="tintColorLayer" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="noiseLayer" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="fallbackLayer" Property="Visibility" Value="Visible" />
                        </Trigger>
                        <DataTrigger Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="true">
                            <Setter TargetName="ContentGrid" Property="Margin" Value="7,0,7,7" />
                            <Setter TargetName="HighContrastBorder" Property="Visibility" Value="Visible" />
                        </DataTrigger>
                        <Trigger Property="WindowState" Value="Maximized">
                            <Setter TargetName="LayoutRoot" Property="BorderThickness" Value="0" />
                            <Setter TargetName="ContentGrid" Property="Margin" Value="0" />
                            <Setter TargetName="HighContrastBorder" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="local:TitleBar.ExtendViewIntoTitleBar" Value="True">
                            <Setter TargetName="AdornerDecorator" Property="Grid.Row" Value="0" />
                            <Setter TargetName="AdornerDecorator" Property="Grid.RowSpan" Value="2" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="ResizeMode" Value="CanResizeWithGrip" />
                                <Condition Property="WindowState" Value="Normal" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="WindowResizeGrip" Property="Visibility" Value="Visible" />
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

</ResourceDictionary>